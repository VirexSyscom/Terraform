# This makes sure the pipeline is triggered every time code is pushed in the validation-testing example source, on all branches.
trigger:
- main

variables:
  # There must be an Azure Service Connection with that name defined in your Azure DevOps settings. See https://docs.microsoft.com/en-us/azure/devops/pipelines/library/connect-to-azure?view=azure-devops
  serviceConnection: 'azurecreate'
  # Terraform settings
  terraformWorkingDirectory: '$(System.DefaultWorkingDirectory)/tffile'
  terraformVersion: 'latest'
  storageaccount: 'InfaDevOpsSA'
  container_name: 'InfaDevOpsContainer'
  key: 'InfaState'

stages:
  - stage: TerraformContinuousIntegration
    displayName: Terraform Module - CI
    jobs:
    - job: TerraformContinuousIntegrationJob
      displayName: TerraformContinuousIntegration - CI Job
      pool:
        name: 'LinuxAgents'
      steps:
       # Step 0: run the Checkov Static Code Analysis
#      - bash: $(terraformWorkingDirectory)/checkov.sh $(terraformWorkingDirectory)
#        displayName: Checkov Static Code Analysis
      # Step 1: install Terraform on the Azure Pipelines agent
      - task: TerraformInstaller@2
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: $(terraformVersion)
      # Step 2: run Terraform init to initialize the workspace
      - task: TerraformCLI@2
        displayName: 'Run terraform init'
        use_azuread_auth: true
        inputs:
          command: init
          workingDirectory: $(terraformWorkingDirectory)
#          commandOptions: -backend-config=storage_account_name=$(storageaccount) -backend-config=container_name=$(container_name) -backend-config=key=$(key)
#          backendType: selfConfigured 
      # Step 3: run Terraform validate to validate HCL syntax
      - task: TerraformCLI@2
        displayName: 'Run terraform validate'
        inputs:
          command: validate
          workingDirectory: $(terraformWorkingDirectory)
      # Step 4: run Terraform plan to validate HCL syntax
      - task: TerraformCLI@2
        displayName: 'Run terraform plan'
        inputs:
          command: plan
          workingDirectory: $(terraformWorkingDirectory)
          environmentServiceName: $(serviceConnection)