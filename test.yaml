# This makes sure the pipeline is triggered every time code is pushed in the validation-testing example source, on all branches.
trigger:
- main

stages:
  - stage: TerraformContinuousIntegration
    displayName: Terraform Module - CI
    jobs:
    - job: TerraformContinuousIntegrationJob
      displayName: TerraformContinuousIntegration - CI Job
      pool:
        name: 'LinuxAgents'
      steps:
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/tffile'
          backendAzureRmUseEnvironmentVariablesForAuthentication: true
          backendAzureRmUseEntraIdForAuthentication: true
          backendServiceArm: $(SVCName)
          backendAzureRmResourceGroupName: $(RG)
          backendAzureRmStorageAccountName: $(ContainerName)
          backendAzureRmContainerName: $(ContainerName)
          backendAzureRmKey: 'tf/terraform.tfstate'
          ARM_CLIENT_ID: $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET: $(ARM_SECRET)
          #ARM_OIDC_TOKEN: $(OIDC_TOKEN)

      - task: TerraformTaskV4@4
        name: terraformPlan
        displayName: Create Terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          commandOptions: '-out main.tfplan'
          environmentServiceNameAzureRM: $(SVCName)

      # Only runs if the 'terraformPlan' task has detected changes the in state. 
      - task: TerraformTaskV4@4
        displayName: Apply Terraform Plan
        condition: and(succeeded(), eq(variables['terraformPlan.changesPresent'], 'true'))
        inputs:
          provider: 'azurerm'
          command: 'apply'
          commandOptions: 'main.tfplan'
          environmentServiceNameAzureRM: $(SVCName)